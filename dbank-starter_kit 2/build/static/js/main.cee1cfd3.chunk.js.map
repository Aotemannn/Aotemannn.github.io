{"version":3,"sources":["components/App.js","serviceWorker.js","index.js","assets/bnb.png"],"names":["App","props","state","web3","account","dbank","balance","dBankAddress","a","this","loadBlockchainData","dispatch","window","ethereum","Web3","enable","alert","amount","e","className","src","bnbLogo","alt","height","style","role","Tabs","defaultActiveKey","id","Tab","eventKey","title","onSubmit","preventDefault","depositAmount","value","deposit","step","type","ref","input","placeholder","required","onClick","withdraw","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"2pBA4IeA,G,yDAhIb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,YACNC,QAAS,GACTC,MAAO,KACPC,QAAS,EACTC,aAAc,MAPC,E,6FAWnB,sBAAAC,EAAA,sEACQC,KAAKC,mBAAmBD,KAAKR,MAAMU,UAD3C,gD,6HAIA,WAAyBA,GAAzB,SAAAH,EAAA,yDAGiC,qBAApBI,OAAOC,SAHpB,uBAIiB,IAAIC,IAAKF,OAAOC,UAJjC,SAKUD,OAAOC,SAASE,SAL1B,6BAwBIH,OAAOI,MAAM,2BAxBjB,2C,mHA4BA,WAAcC,GAAd,SAAAT,EAAA,0F,oHAKA,WAAeU,GAAf,SAAAV,EAAA,0F,2EAkBA,WAAU,IAAD,OACP,OACE,yBAAKW,UAAU,kBACb,yBAAKA,UAAU,kEACf,yBAAKC,IAAKC,IAASF,UAAU,WAAWG,IAAI,OAAOC,OAAO,OACxD,wCAEF,yBAAKJ,UAAU,oCACf,6BACE,oDAAyB,yBAAKC,IAAKC,IAASG,MAAO,CAACD,OAAO,QAASD,IAAI,cACxE,+CAAiBb,KAAKP,MAAME,UAC5B,6BACA,yBAAKe,UAAU,OACb,0BAAMM,KAAK,OAAON,UAAU,gCAC1B,yBAAKA,UAAU,2BACb,kBAACO,EAAA,EAAD,CAAMC,iBAAiB,UAAUC,GAAG,4BAClC,kBAACC,EAAA,EAAD,CAAKC,SAAS,UAAUC,MAAM,WAC5B,6BACE,6BADF,mCAGE,0BAAMC,SAAU,SAACd,GACfA,EAAEe,iBACF,IAAIhB,EAAS,EAAKiB,cAAcC,MAChClB,GAAe,SAAG,GAAI,IACtB,EAAKmB,QAAQnB,KAEb,yBAAKE,UAAU,sBACb,6BACA,2BACIS,GAAG,gBACHS,KAAK,OACLC,KAAK,SACLC,IAAK,SAACC,GAAY,EAAKN,cAAgBM,GACvCrB,UAAU,+BACVsB,YAAY,YACZC,UAAQ,KAEd,4BAAQJ,KAAK,SAASnB,UAAU,mBAAhC,cAKN,kBAACU,EAAA,EAAD,CAAKC,SAAS,WAAWC,MAAM,YAC7B,6BADF,2CAGE,6BACA,6BACA,6BACE,4BAAQO,KAAK,SAASnB,UAAU,kBAAkBwB,QAAS,SAACzB,GAAD,OAAO,EAAK0B,SAAS1B,KAAhF,wB,GApHJ2B,cCEEC,QACW,cAA7BlC,OAAOmC,SAASC,UAEe,UAA7BpC,OAAOmC,SAASC,UAEhBpC,OAAOmC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.cee1cfd3.chunk.js","sourcesContent":["import { Tabs, Tab } from 'react-bootstrap'\nimport dBank from '../abis/dBank.json'\nimport React, { Component } from 'react';\nimport Token from '../abis/Token.json'\nimport bnbLogo from \"../assets/bnb.png\"\nimport Web3 from 'web3';\nimport './App.css';\n\n//h0m3w0rk - add new tab to check accrued interest\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      web3: 'undefined',\n      account: '',\n      dbank: null,\n      balance: 0,\n      dBankAddress: null\n    }\n  }\n\n  async componentWillMount() {\n    await this.loadBlockchainData(this.props.dispatch)\n  }\n\n  async loadBlockchainData(dispatch) {\n\n    //check if MetaMask exists\n    if (typeof window.ethereum !== 'undefined') {\n      const web3 = new Web3(window.ethereum)\n      await window.ethereum.enable(); //connect to Metamask\n\n      //check if account is detected, then load balance&setStates, elsepush alert\n\n\n      //assign to values to variables: web3, netId, accounts\n\n\n      //in try block load contracts\n      try {\n\n      } catch (e) {\n        console.log('Error', e)\n        window.alert('Contracts not deployed to the current network')\n      }\n\n    }\n    //if MetaMask not exists push alert\n  else {\n      window.alert('Please install MetaMask')\n    }\n  }\n\n  async deposit(amount) {\n    //check if this.state.dbank is ok\n      //in try block call dBank deposit();\n  }\n\n  async withdraw(e) {\n    //prevent button from default click\n    //check if this.state.dbank is ok\n    //in try block call dBank withdraw();\n  }\n\n  // constructor(props) {\n  //   super(props)\n  //   this.state = {\n  //     web3: 'undefined',\n  //     account: '',\n  //     token: null,\n  //     dbank: null,\n  //     balance: 0,\n  //     dBankAddress: null\n  //   }\n  // }\n\n  render() {\n    return (\n      <div className='text-monospace'>\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n        <img src={bnbLogo} className=\"App-logo\" alt=\"logo\" height=\"32\"/>\n          <b>DeFi App</b>\n        </nav>\n        <div className=\"container-fluid mt-5 text-center\">\n        <br></br>\n          <h1>Welcome to BNB TRADE <img src={bnbLogo} style={{height:\"40px\"}} alt=\"bnb logo\"/></h1>\n          <h2>{`Your ID: ${this.state.account}`}</h2>\n          <br></br>\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n              <div className=\"content mr-auto ml-auto\">\n                <Tabs defaultActiveKey=\"profile\" id=\"uncontrolled-tab-example\">\n                  <Tab eventKey=\"deposit\" title=\"Deposit\">\n                    <div>\n                      <br></br>\n                      How much do you want to deposit?\n                      <form onSubmit={(e) => {\n                        e.preventDefault()\n                        let amount = this.depositAmount.value\n                        amount = amount * 10**18 //convert to wei\n                        this.deposit(amount)\n                      }}>\n                        <div className='form-group mr-sm-2'>\n                          <br></br>\n                          <input\n                              id='depositAmount'\n                              step=\"0.01\"\n                              type='number'\n                              ref={(input) => { this.depositAmount = input }}\n                              className=\"form-control form-control-md\"\n                              placeholder='amount...'\n                              required />\n                        </div>\n                        <button type='submit' className='btn btn-primary'>DEPOSIT</button>\n                      </form>\n\n                    </div>\n                  </Tab>\n                  <Tab eventKey=\"withdraw\" title=\"Withdraw\">\n                    <br></br>\n                    Do you want to withdraw + take interest?\n                    <br></br>\n                    <br></br>\n                    <div>\n                      <button type='submit' className='btn btn-primary' onClick={(e) => this.withdraw(e)}>WITHDRAW</button>\n                    </div>\n                  </Tab>\n                </Tabs>\n              </div>\n\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/bnb.162aaf57.png\";"],"sourceRoot":""}